<?php

/**
 * @file
 * Hook implementations for the Akamai Drupal 8 integration module.
 */

use Drupal\akamai\PurgeStatus;
use Drupal\Core\Render\BubbleableMetadata;

/**
 * Implements hook_cron().
 */
function akamai_cron() {
  $config = \Drupal::configFactory()->get('akamai.settings');
  $expire = $config->get('status_expire');
  $status_storage = \Drupal::service('akamai.status_storage');

  // Get all statuses currently stored in state.
  $statuses = $status_storage->getResponseStatuses();
  $to_delete = [];
  // Mark logs older than our expire period for deletion.
  if (!empty($statuses)) {
    foreach ($statuses as $status) {
      $purge_status = new PurgeStatus($status);
      if (($purge_status->getLastCheckedTime() + $expire) <= \Drupal::time()->getRequestTime()) {
        $to_delete[] = $purge_status->getPurgeId();
      }
    }
  }
  // Now delete them.
  foreach ($to_delete as $purge_id) {
    $status_storage->delete($purge_id);
  }

  \Drupal::service('logger.channel.akamai')->info('Purge %count old Purge status logs.', ['%count' => count($to_delete)]);
}

/**
 * Implements hook_token_info().
 */
function akamai_token_info() {
  $config = \Drupal::configFactory()->get('akamai.settings');
  return [
    'types' => [
      'akamai' => [
        'name' => t('Akamai'),
        'description' => t('Tokens providing access to Akamai-related information.'),
      ],
    ],
    'tokens' => [
      'akamai' => [
        'edgescape' => [
          'name' => t('Edgescape'),
          'description' => t('The type of Edgescape location information, for instance <code>continent</code> or <code>country_code</code>.'),
          'dynamic' => TRUE,
        ],
      ],
    ],
  ];
}

/**
 * Implements hook_tokens().
 */
function akamai_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];

  if ($type == 'akamai') {

    if ($edgescapeTokens = \Drupal::token()->findWithPrefix($tokens, 'edgescape')) {
      $edgescape = \Drupal::service('akamai.helper.edgescape');
      foreach ($edgescapeTokens as $type => $original) {
        $replacements[$original] = $edgescape->getInformationByType($type);
      }
    }
  }

  return $replacements;
}
